package com.example.xuexiaotanchuangyanshi.beans;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BAO_CUN_BEAN".
*/
public class BaoCunBeanDao extends AbstractDao<BaoCunBean, Long> {

    public static final String TABLENAME = "BAO_CUN_BEAN";

    /**
     * Properties of entity BaoCunBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ShipingIP = new Property(1, String.class, "shipingIP", false, "SHIPING_IP");
        public final static Property ZhujiDiZhi = new Property(2, String.class, "zhujiDiZhi", false, "ZHUJI_DI_ZHI");
        public final static Property Moban = new Property(3, int.class, "moban", false, "MOBAN");
        public final static Property TuisongDiZhi = new Property(4, String.class, "tuisongDiZhi", false, "TUISONG_DI_ZHI");
        public final static Property Gonggao = new Property(5, String.class, "gonggao", false, "GONGGAO");
        public final static Property IsShowMoshengren = new Property(6, boolean.class, "isShowMoshengren", false, "IS_SHOW_MOSHENGREN");
        public final static Property IsShowShiPingLiu = new Property(7, boolean.class, "isShowShiPingLiu", false, "IS_SHOW_SHI_PING_LIU");
        public final static Property IsHengOrShu = new Property(8, boolean.class, "isHengOrShu", false, "IS_HENG_OR_SHU");
    }


    public BaoCunBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BaoCunBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BAO_CUN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SHIPING_IP\" TEXT," + // 1: shipingIP
                "\"ZHUJI_DI_ZHI\" TEXT," + // 2: zhujiDiZhi
                "\"MOBAN\" INTEGER NOT NULL ," + // 3: moban
                "\"TUISONG_DI_ZHI\" TEXT," + // 4: tuisongDiZhi
                "\"GONGGAO\" TEXT," + // 5: gonggao
                "\"IS_SHOW_MOSHENGREN\" INTEGER NOT NULL ," + // 6: isShowMoshengren
                "\"IS_SHOW_SHI_PING_LIU\" INTEGER NOT NULL ," + // 7: isShowShiPingLiu
                "\"IS_HENG_OR_SHU\" INTEGER NOT NULL );"); // 8: isHengOrShu
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BAO_CUN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BaoCunBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String shipingIP = entity.getShipingIP();
        if (shipingIP != null) {
            stmt.bindString(2, shipingIP);
        }
 
        String zhujiDiZhi = entity.getZhujiDiZhi();
        if (zhujiDiZhi != null) {
            stmt.bindString(3, zhujiDiZhi);
        }
        stmt.bindLong(4, entity.getMoban());
 
        String tuisongDiZhi = entity.getTuisongDiZhi();
        if (tuisongDiZhi != null) {
            stmt.bindString(5, tuisongDiZhi);
        }
 
        String gonggao = entity.getGonggao();
        if (gonggao != null) {
            stmt.bindString(6, gonggao);
        }
        stmt.bindLong(7, entity.getIsShowMoshengren() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsShowShiPingLiu() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsHengOrShu() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BaoCunBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String shipingIP = entity.getShipingIP();
        if (shipingIP != null) {
            stmt.bindString(2, shipingIP);
        }
 
        String zhujiDiZhi = entity.getZhujiDiZhi();
        if (zhujiDiZhi != null) {
            stmt.bindString(3, zhujiDiZhi);
        }
        stmt.bindLong(4, entity.getMoban());
 
        String tuisongDiZhi = entity.getTuisongDiZhi();
        if (tuisongDiZhi != null) {
            stmt.bindString(5, tuisongDiZhi);
        }
 
        String gonggao = entity.getGonggao();
        if (gonggao != null) {
            stmt.bindString(6, gonggao);
        }
        stmt.bindLong(7, entity.getIsShowMoshengren() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsShowShiPingLiu() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsHengOrShu() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public BaoCunBean readEntity(Cursor cursor, int offset) {
        BaoCunBean entity = new BaoCunBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shipingIP
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zhujiDiZhi
            cursor.getInt(offset + 3), // moban
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tuisongDiZhi
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gonggao
            cursor.getShort(offset + 6) != 0, // isShowMoshengren
            cursor.getShort(offset + 7) != 0, // isShowShiPingLiu
            cursor.getShort(offset + 8) != 0 // isHengOrShu
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BaoCunBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setShipingIP(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZhujiDiZhi(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMoban(cursor.getInt(offset + 3));
        entity.setTuisongDiZhi(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGonggao(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsShowMoshengren(cursor.getShort(offset + 6) != 0);
        entity.setIsShowShiPingLiu(cursor.getShort(offset + 7) != 0);
        entity.setIsHengOrShu(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BaoCunBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BaoCunBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BaoCunBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
